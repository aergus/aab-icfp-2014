; check if lambdaman is at a crossing
DEF his_start 128
DEF his_end 191 ; 128 + 63 works fine with and (for larger numbers)
DEFENUM his_cur
DEFENUM not_init
DEFENUM his_dir
jeq init, [not_init],0

jeq history_dir, [his_dir],1

history:
        int 1
        mov [neighbours_in_x], a
        mov [neighbours_in_y], b
        mov [neighbours_rt], history_return
        mov pc,neighbours
history_return:
        ; check if it is a crossing
        jlt follow, [neighbours_out],3
        ; It is a crossing
        ; check if it is the same as the last one
        mov a,[his_cur]
        sub a,2
        jeq history_x, [a],[neighbours_in_x]
        mov pc, history_new
history_x:
        inc a
        jeq history_dup, [a],[neighbours_in_y]
history_new:
        mov e,[his_cur]
        mov [e], [neighbours_in_x]
        inc e
        mov [e], [neighbours_in_y]
        add [his_cur],2
history_wantdir:
        mov [his_dir],1
        mov pc,follow

history_dup:
        ; update only direction
        add [his_cur],2
        mov pc,history_wantdir 
         
history_dir:
        ; assume that he moved
        mov d,[his_cur]
        dec d
        mov c,d
        dec c
        int 1
        mov [compare_rt], history_dir_return
        mov pc,comparecoordinates
history_dir_return:
        mov e, [his_cur]
        mov [e], [compare_out_major]
        add [his_cur], 2
        and [his_cur], his_end 
        mov [his_dir], 0
         
follow:
        ; get our coordinates in a and b
        int 3
        int 5
        mov c, [his_cur]
        mov d, c
        add d, 1
follow_loop:
        jeq follow_x, [c],a
        mov pc, follow_cont
follow_x:
        jeq follow_break, [d],b
follow_cont:
        add c, 4
        and c, his_end
        add d, 4
        and d, his_end
        jeq move, [his_cur],c
        mov pc, follow_loop
follow_break:
        add d,1 
        mov a,d
        int 0
        hlt

; move to lambda
move:
        int 3
        int 5
        mov [neighbours_in_x], a
        mov [neighbours_in_y], b
        mov c,neighbours_in_x
        mov d,neighbours_in_y
        int 1
        mov [compare_rt], move_return
        mov pc,comparecoordinates
move_return:
        mov a,[compare_out_major]
        int 0
        hlt

; hand rule
; in 
DEFENUM hand_in ;1 for left, -1 for right
; init [neighbours_in_x], [neighbours_in_y]
hand:
        ; get our coordinates in a and b
        int 3
        int 5
        ; save them in neighbours_in_x etc.
        mov [neighbours_in_x], a
        mov [neighbours_in_y], b
        mov [neighbours_rt],hand_return
        mov pc,neighbours
hand_return:
        ; save if it is a crossing
        ; also direction (which is in b)
        int 3
        int 6
        ; b now contains my current orientation
        xor b,2 ; reverse b
        mov a,b
        mov c,[hand_in]
        mul c,2
hand_loop:
        add a,[hand_in]
        sub c,[hand_in]
        and a,3 ; poor man's % 4
        jeq hand_loop, [a],0 ; a wand? then try next direction
        ; otherwise set direction
        int 0
        hlt

init:
        mov [not_init],1
        mov [hand_in],1
        mov [his_cur], his_start
        mov pc, history

; in ([neighbours_in_x], [neighbours_in_y]) coordinate pair
; doesn't change neighbours_in_x and neighbours_in_y
DEFENUM neighbours_in_x
DEFENUM neighbours_in_y
;uses
; a b c e f 
DEFENUM neighbours_x
DEFENUM neighbours_y
DEFENUM neighbours_counter ; as a counter
; out 
; [0] .. [3] contain the map information in this direction
DEFENUM neighbours_out ; number of neighbours
; jumps back to
DEFENUM neighbours_rt

neighbours:
        ; set e f h for offset
        mov e,neighbours_x
        mov f,neighbours_y
        mov [offset_rt],neighbours_offreturn
        mov c,offup
        mov [neighbours_out],0
        mov [neighbours_counter],255
neighbours_loop:
        inc [neighbours_counter]
        mov [neighbours_x],[neighbours_in_x]
        mov [neighbours_y],[neighbours_in_y]
        mov pc,c
neighbours_offreturn:
        add c,2
        mov a,[neighbours_x]
        mov b,[neighbours_y]
        int 7
        mov b,[neighbours_counter]
        mov [b],a
        jeq neighbours_end, a, 0
        inc [neighbours_out]
neighbours_end:
        jlt neighbours_loop, [neighbours_counter], 3
        mov pc,[neighbours_rt]
; offset
; in c direction
;    h return
; out add to [e] and [f] offset 
; keeps e,f,h const
; jumps to
DEFENUM offset_rt
; tains c

offset:
mul c,2
add c,offup
mov pc,c
offup:
        dec [f] ; go up
        mov pc,[offset_rt]
offright:
        inc [e] ; go right
        mov pc,[offset_rt]
offdown:
        inc [f] ; go down
        mov pc,[offset_rt]
offleft:
        dec [e] ; go left
        mov pc,[offset_rt]
offend:
        hlt

DEFEnum compare_x_val
DEFEnum compare_x_dir ; is set to 1 (right) if a >= [c] and 3 (left)
                      ; otherwise
DEFEnum compare_y_val ; is set to 2 (down) if b >= [d] and 0 (up) o/w
DEFEnum compare_y_dir
DEFEnum compare_out_major ; dominant direction
DEFEnum compare_out_minor ; minor direction


; compares (a,b) and ([c],[d])
; (a, b) is often set via interrupts
; saves the result in compare_out
; jumps to
DEFEnum compare_rt
; modifies only private stuff
comparecoordinates:
        ; Which difference is bigger?
        mov [compare_x_val],a
        sub [compare_x_val],[c]
        mov [compare_y_val],b
        sub [compare_y_val],[d]
        jlt compare_left, a,[c] ; then a - [c] is negative
compare_right:
        mov [compare_x_dir],1
        mov pc, compare_y
compare_left:
        mul [compare_x_val],255
        mov [compare_x_dir],3
compare_y:
        jlt compare_up, b,[d]
compare_down:
        mov [compare_y_dir],2
        mov pc, compare_xy
compare_up:
        mul [compare_y_val],255
        mov [compare_y_dir],0
compare_xy:
        jgt compare_xdom, [compare_x_val],[compare_y_val]
compare_ydom:
        mov [compare_out_major], [compare_y_dir]
        mov [compare_out_minor], [compare_x_dir]
        mov pc, [compare_rt]
compare_xdom:
        mov [compare_out_major], [compare_x_dir]
        mov [compare_out_minor], [compare_y_dir]
        mov pc, [compare_rt]
