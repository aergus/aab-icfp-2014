; hand rule
; in 
DEFENUM hand_in ;1 for left, -1 for right
DEFENUM winding
DEFENUM leave
DEFENUM last_crossing_x
DEFENUM last_crossing_y
; init [neighbours_in_x], [neighbours_in_y]
DEFENUM not_init
jeq init, 0, [not_init]
hand:
        ; get our coordinates in a and b
        int 3
        int 5
        ; save them in neighbours_in_x etc.
        mov [neighbours_in_x], a
        mov [neighbours_in_y], b
        mov pc,neighbours
hand_return:
        jeq leave_mode, [leave],1
        ; save if it is a crossing
        ; also direction (which is in b)
        int 3
        int 6
        jlt hand_nocrossing, [neighbours_out],3
        mov [last_crossing_x], [neighbours_in_x]
        mov [last_crossing_y], [neighbours_in_y]
hand_nocrossing:
        ; b now contains my current orientation
        xor b,2 ; reverse b
        mov a,b
        mov c,[hand_in]
        mul c,2
hand_loop:
        add a,[hand_in]
        sub c,[hand_in]
        and a,3 ; poor man's % 4
        jeq hand_loop, [a],0 ; a wand? then try next direction
        ; otherwise set direction
        ; update winding
        add [winding],c
        mov g,[winding]
        int 8
        jeq hand_leave, [winding], 0
        int 0
        hlt
hand_leave:
        ; leave mode
        mov [leave],1
leave_mode:
        ; are we at the last crossing?
        jeq xagree, [neighbours_in_x], [last_crossing_x]
        mov pc, leave_continue
xagree:
        jeq leave_now, [neighbours_in_y], [last_crossing_y]
leave_continue:
        int 3
        int 6
        ; b now contains my current orientation
        xor b,2 ; reverse b
        mov a,b
        mov c,[hand_in]
        mul c,2
leave_loop:
        add a,[hand_in]
        add c,[hand_in]
        and a,3 ; poor man's % 4
        jeq leave_loop, [a],0 ; a wand? then try next direction
        jeq leave_finish, [skip], 0
        dec [skip]
        mov pc,leave_loop
leave_finish:
        jeq leave_finish_, [finish],1
        int 0
        hlt
leave_finish_: ;follow the new wall
        mov [finish],0
        mov [leave],0
        mov [winding],a ; TODO is this correct?
        int 0
        hlt
DEFENUM skip
DEFENUM finish
leave_now:
        mov [skip],1
        mov [finish],1
        mov pc,leave_continue


init:
        mov [winding],255
        mov [not_init],1
        mov [hand_in],1
        hlt


; in ([neighbours_in_x], [neighbours_in_y]) coordinate pair
; doesn't change neighbours_in_x and neighbours_in_y
DEFENUM neighbours_in_x
DEFENUM neighbours_in_y
;uses
; a b c e f 
DEFENUM neighbours_x
DEFENUM neighbours_y
DEFENUM neighbours_counter ; as a counter
; out 
; [0] .. [3] contain the map information in this direction
DEFENUM neighbours_out ; number of neighbours

neighbours:
        ; set e f h for offset
        mov e,neighbours_x
        mov f,neighbours_y
        mov h,neighbours_offreturn
        mov c,offup
        mov [neighbours_out],0
        mov [neighbours_counter],255
neighbours_loop:
        inc [neighbours_counter]
        mov [neighbours_x],[neighbours_in_x]
        mov [neighbours_y],[neighbours_in_y]
        mov pc,c
neighbours_offreturn:
        add c,2
        mov a,[neighbours_x]
        mov b,[neighbours_y]
        int 7
        mov b,[neighbours_counter]
        mov [b],a
        jeq neighbours_end, a, 0
        inc [neighbours_out]
neighbours_end:
        jlt neighbours_loop, [neighbours_counter], 3
        mov pc,hand_return
; offset
; in c direction
;    h return
; out add to [e] and [f] offset 
; keeps e,f,h const
; tains c

offset:
mul c,2
add c,offup
mov pc,c
offup:
        dec [f] ; go up
        mov pc,h
offright:
        inc [e] ; go right
        mov pc,h
offdown:
        inc [f] ; go down
        mov pc,h
offleft:
        dec [e] ; go left
        mov pc,h
offend:
        hlt
